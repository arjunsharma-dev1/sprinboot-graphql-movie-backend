scalar Date

type Movie {
    id: ID,
    meta: MovieMeta!,
    actors(id: ID): [Actor!],
    next: [Movie!],
    rating: Rating,
}

type MovieMeta {
    movie: Movie!,
    genre: [String!]!,
    title: String!,
    releasedOn: Date
}
#duration: Duration,
#scalar Duration

type Rating {
    rate: Float,
    scale: Int
}

type Actor {
    id: ID,
    name: String!,
    dob: Date,
    movies: [Movie!]!
}

type Query {
    movieById(id: ID): Movie,
    actorOfMovie(movieId: ID): [Actor!]!
    getActors: [Actor!]!
    getMovies: [Movie!]!
}

type Mutation {
    createMovie(genre: [String!]!, title: String!, releasedOn: Date, actors: [ID]!): ID
    createActor(name: String!, dob: Date, movies: [String!]): ID
    addRating(movieId: String!, scale: Int, rate: Float!): Rating
    addActorToMovie(movieId: String!, actorId: String!): Boolean
}